import java.util.NoSuchElementException;

public class ArrayQueue<T> implements QueueInterface<T> {
	private T[] array;
	private int front;
	private int rear;
	private int size;
	private int capacity;

	@SuppressWarnings("unchecked")
	public ArrayQueue(int capacity) {
		this.capacity = capacity;
		this.array = (T[]) new Object[capacity];
		this.front = 0;
		this.rear = -1;
		this.size = 0;
	}

	@Override
	public void enqueue(T item) {
		if (isFull()) {
			throw new IllegalStateException("Queue is full");
		}
		rear = (rear + 1) % capacity;
		array[rear] = item;
		size++;
	}

	@Override
	public T dequeue() {
		if (isEmpty()) {
			throw new NoSuchElementException("Queue is empty");
		}
		T item = array[front];
		front = (front + 1) % capacity;
		size--;
		return item;
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	public boolean isFull() {
		return size == capacity;
	}

	@Override
	public int size() {
		return size;
	}

	@Override
	public T peek() {
		if (isEmpty()) {
			throw new NoSuchElementException("Queue is empty");
		}
		return array[front];
	}
}
