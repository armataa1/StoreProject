import java.util.NoSuchElementException;

public class LinkedQueue<T> implements QueueInterface<T> {
	private Node<T> front;
	private Node<T> rear;
	private int size;

	public LinkedQueue() {
		front = null;
		rear = null;
		size = 0;
	}

	@Override
	public void enqueue(T item) {
		Node<T> newNode = new Node<>(item);
		if (isEmpty()) {
			front = newNode;
		} else {
			rear.setNext(newNode);
		}
		rear = newNode;
		size++;
	}

	@Override
	public T dequeue() {
		if (isEmpty()) {
			throw new NoSuchElementException("Queue is empty");
		}
		T item = front.getData();
		front = front.getNext();
		size--;
		if (isEmpty()) {
			rear = null;
		}
		return item;
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public int size() {
		return size;
	}

	@Override
	public T peek() {
		if (isEmpty()) {
			throw new NoSuchElementException("Queue is empty");
		}
		return front.getData();
	}
}
